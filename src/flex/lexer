 
%{
#include <stdlib.h>

#include "../parse_node.h"
/* needed for token enum */
#include "../bison/parser.tab.h"

int __lexer_debug__ = 0; /* toggle for debug prints*/

#define DEBUG_LOG(...)                  \
    do {                                \
        if (__lexer_debug__  != 0)      \
            printf(__VA_ARGS__);        \
    } while (0)

%}

white           [ \t]+
digit           [0-9]
integer         {digit}+
real            {integer}("."{integer})?
id              [a-zA-Z]([a-zA-Z0-9_!]+)?
line_comment    "#".+"\n"
single_quote    "'"
double_quote    "\""
char            {single_quote}"\".{single_quote}
string          {double_quote}.+{double_quote}

%%

{white}                     { /* eat up whitespace */ }

{integer}                   { DEBUG_LOG("[INTEGER : %s] ", yytext);
                              yylval.ival = atoi(yytext);
                              return INTEGER; }
                                
{real}                      { DEBUG_LOG("[FLOAT : %s] ", yytext);
                              yylval.fval = atof(yytext);
                              return FLOAT; }
    
"!"|"+"|"-"|"*"|"/"         { DEBUG_LOG("[%c] ", yytext[0]); return yytext[0]; }
">"|"<"|"="                 { DEBUG_LOG("[%c] ", yytext[0]); return yytext[0]; }
"("|")"                     { DEBUG_LOG("[%c] ", yytext[0]); return yytext[0]; }

"\n"|";"                    { DEBUG_LOG("[SEPARATOR] \n"); /* return SEPARATOR; */ }

">="|"<="|"!="|"=="         { DEBUG_LOG("[KEYWORD : %s] ", yytext); /* return @todo */ }
"if"                        { DEBUG_LOG("[IF]"); return IF; }
"while"                     { DEBUG_LOG("[WHILE]"); return WHILE; }
"elseif"                    { DEBUG_LOG("[ELSEIF]"); return ELSEIF; }
"else"                      { DEBUG_LOG("[ELSE]"); return ELSE; }
"end"                       { DEBUG_LOG("[END]"); return END; }

{id}                        { DEBUG_LOG("[VAR : %s] ", yytext);
                              yylval.id = (char*)strdup(yytext);
                              return VAR; }

{line_comment}              { DEBUG_LOG("[COMMENT + SEPARATOR] \n"); /* return SEPARATOR; */ }

{string}                    { DEBUG_LOG("[STRING : %s]", yytext);
                              yylval.sval = (char*)strdup(yytext);
                              return STRING; }

.                           { DEBUG_LOG("[UNK] "); }

%%



