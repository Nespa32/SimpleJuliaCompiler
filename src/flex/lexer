 
%{
#include <stdlib.h>

#include "../parse_node.h"
/* needed for token enum */
#include "../bison/parser.tab.h"

int __lexer_debug__ = 0; /* toggle for debug prints*/

#define DEBUG_LOG(...)                  \
    do {                                \
        if (__lexer_debug__  != 0) {    \
            printf(__VA_ARGS__);        \
            printf("\n");               \
        }                               \
    } while (0)

%}

white           [ \t]+
digit           [0-9]
integer         {digit}+
real            {integer}("."{integer})?
id              [a-zA-Z]([a-zA-Z0-9_!]+)?
line_comment    "#".+"\n"
single_quote    "'"
double_quote    "\""
char            {single_quote}"\".{single_quote}
string          {double_quote}.+{double_quote}

%%

{white}                     { /* eat up whitespace */ }

{integer}                   { DEBUG_LOG("[TOKEN_INTEGER : %s] ", yytext);
                              yylval.ival = atoi(yytext);
                              return TOKEN_INTEGER; }
                                
{real}                      { DEBUG_LOG("[TOKEN_FLOAT : %s] ", yytext);
                              yylval.fval = atof(yytext);
                              return TOKEN_FLOAT; }

"!"                         { DEBUG_LOG("[TOKEN_NEG]");
                              return TOKEN_NEG; }

"+"                         { DEBUG_LOG("[TOKEN_ADD]");
                              return TOKEN_ADD; }

"-"                         { DEBUG_LOG("[TOKEN_SUB]");
                              return TOKEN_SUB; }

"*"                         { DEBUG_LOG("[TOKEN_MUL]");
                              return TOKEN_MUL; }

"/"                         { DEBUG_LOG("[TOKEN_DIV]");
                              return TOKEN_DIV; }

">"                         { DEBUG_LOG("[TOKEN_GT]");
                              return TOKEN_GT; }

"<"                         { DEBUG_LOG("[TOKEN_LT]");
                              return TOKEN_LT; }

"="                         { DEBUG_LOG("[TOKEN_ASSIGN]");
                              return TOKEN_ASSIGN; }

">="                        { DEBUG_LOG("[TOKEN_GE]");
                              return TOKEN_GE; }

"<="                        { DEBUG_LOG("[TOKEN_LE]");
                              return TOKEN_LE; }

"!="                        { DEBUG_LOG("[TOKEN_NE]");
                              return TOKEN_NE; }

"=="                        { DEBUG_LOG("[TOKEN_EQ]");
                              return TOKEN_EQ; }
                              
"&"                         { DEBUG_LOG("[TOKEN_BITWISE_AND]");
                              return TOKEN_BITWISE_AND; }

"|"                         { DEBUG_LOG("[TOKEN_BITWISE_OR]");
                              return TOKEN_BITWISE_OR; }
                              
"&&"                        { DEBUG_LOG("[TOKEN_LOGICAL_AND]");
                              return TOKEN_LOGICAL_AND; }
                              
"||"                        { DEBUG_LOG("[TOKEN_LOGICAL_OR]");
                              return TOKEN_LOGICAL_OR; }

"("|")"                     { DEBUG_LOG("[%c] ", yytext[0]);
                              return yytext[0]; }

"\n"|";"                    { DEBUG_LOG("[TOKEN_SEPARATOR]"); /* return TOKEN_SEPARATOR; */ }

"if"                        { DEBUG_LOG("[TOKEN_IF]"); return TOKEN_IF; }
"while"                     { DEBUG_LOG("[TOKEN_WHILE]"); return TOKEN_WHILE; }
"elseif"                    { DEBUG_LOG("[TOKEN_ELSEIF]"); return TOKEN_ELSEIF; }
"else"                      { DEBUG_LOG("[TOKEN_ELSE]"); return TOKEN_ELSE; }
"end"                       { DEBUG_LOG("[TOKEN_END]"); return TOKEN_END; }

"println"                   { DEBUG_LOG("[TOKEN_PRINTLN]"); return TOKEN_PRINTLN; }

"true"                      { DEBUG_LOG("[TOKEN_TRUE]");
                              yylval.ival = 1;
                              return TOKEN_TRUE; }
                              
"false"                     { DEBUG_LOG("[TOKEN_FALSE]");
                              yylval.ival = 0;
                              return TOKEN_FALSE; }

{id}                        { DEBUG_LOG("[TOKEN_VAR : %s] ", yytext);
                              yylval.sval = (char*)strdup(yytext);
                              return TOKEN_VAR; }

{line_comment}              { DEBUG_LOG("[TOKEN_COMMENT + TOKEN_SEPARATOR]"); /* return TOKEN_SEPARATOR; */ }

{string}                    { /* DEBUG_LOG("[TOKEN_STRING : %s]", yytext);
                              yylval.sval = (char*)strdup(yytext);
                              return TOKEN_STRING; */ }

.                           { DEBUG_LOG("[UNK]"); }

%%

